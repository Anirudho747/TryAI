Test Cases for Ecommerce Web Application - "Buy Later" Functionality**

| **Test Case ID** | **Test Case Description** | **Preconditions** | **Steps** | **Expected Result** |
| --- | --- | --- | --- | --- |
| 1 | **Adding Multiple Items to Cart** | User is logged in to the application and has access to the product catalog. | 1. Launch the ecommerce web application. <br> 2. Navigate to the product catalog. <br> 3. Select multiple items and add them to the cart. | All selected items are successfully added to the cart, and the cart displays the correct number of items. |
| 2 | **Selecting Items to Move to "Buy Later" Section** | User has multiple items in their cart. | 1. Navigate to the cart page. <br> 2. Select one or more items to move to the "Buy Later" section. <br> 3. Click the "Move to Buy Later" button. | The selected items are removed from the cart and added to the "Buy Later" section. |
| 3 | **Removing Items from Cart** | User has selected items to move to the "Buy Later" section. | 1. Navigate to the cart page. <br> 2. Select one or more items to move to the "Buy Later" section. <br> 3. Click the "Move to Buy Later" button. | The selected items are removed from the cart, and the cart is updated to reflect the remaining items. |
| 4 | **Retaining Items in "Buy Later" Section** | User has moved items to the "Buy Later" section. | 1. Navigate to the "Buy Later" section. <br> 2. Verify that all moved items are displayed in the "Buy Later" section. <br> 3. Log out of the application and log back in. | The items in the "Buy Later" section are retained and displayed correctly after logging back in. |
| 5 | **Viewing "Buy Later" Items** | User has items in the "Buy Later" section. | 1. Navigate to the "Buy Later" section. <br> 2. Verify that all items moved to the "Buy Later" section are displayed. | The "Buy Later" section displays all moved items with their details (e.g., product name, price, image). |
| 6 | **Adding "Buy Later" Items Back to Cart** | User has items in the "Buy Later" section. | 1. Navigate to the "Buy Later" section. <br> 2. Select one or more items to add back to the cart. <br> 3. Click the "Add to Cart" button. | The selected items are removed from the "Buy Later" section and added back to the cart. |
| 7 | **API Endpoint Test for Moving Items** | User has items in the cart and the "Buy Later" section. | 1. Use a tool like Postman to send a request to the API endpoint for moving items. <br> 2. Verify that the API call is successful and the items are moved. | The API endpoint correctly processes the request, and the items are moved to the "Buy Later" section. |
| 8 | **Displaying "Buy Later" Items in React Native App** | User has items in the "Buy Later" section. | 1. Launch the React Native app. <br> 2. Navigate to the "Buy Later" section. <br> 3. Verify that all items are displayed correctly. | The "Buy Later" section in the React Native app displays all items with their details. |
| 9 | **Testing MySQL Database for "Buy Later" Items** | User has moved items to the "Buy Later" section. | 1. Access the MySQL database. <br> 2. Verify that the "Buy Later" items are stored correctly in the new table. <br> 3. Check that the user_id, product_id, and added_at columns are populated correctly. | The "Buy Later" items are stored correctly in the database with the appropriate user_id, product_id, and timestamp. |
| 10 | **Testing with TypeScript Definitions** | The "Buy Later" functionality is implemented with TypeScript. | 1. Review the TypeScript definitions for the "Buy Later" items and API endpoint. <br> 2. Verify that the types are correctly defined and used throughout the code. | The TypeScript definitions are correct, and the code adheres to the defined types. |
| 11 | **Multiple Failed Attempts to Move Items** | User attempts to move invalid or unavailable items to the "Buy Later" section. | 1. Navigate to the cart page. <br> 2. Select an invalid or unavailable item to move to the "Buy Later" section. <br> 3. Click the "Move to Buy Later" button. | An error message is displayed indicating that the item cannot be moved to the "Buy Later" section. |
| 12 | **Performance Testing with Large Number of Items** | User has a large number of items in the cart and "Buy Later" section. | 1. Add a large number of items to the cart. <br> 2. Move a subset of items to the "Buy Later" section. <br> 3. Verify that the application handles the operation without performance issues. | The application handles the operation smoothly, and there is no significant performance degradation. |
| 13 | **Security Testing for "Buy Later" Functionality** | User attempts to access another user's "Buy Later" section. | 1. Log in as User A and move items to the "Buy Later" section. <br> 2. Log in as User B and attempt to access User A's "Buy Later" section. | User B cannot access User A's "Buy Later" section, and an appropriate error message is displayed. |
| 14 | **Testing Cache Mechanism for "Buy Later" Section** | User has items in the "Buy Later" section and logs out. | 1. Log in to the application and move items to the "Buy Later" section. <br> 2. Log out of the application. <br> 3. Log back in and navigate to the "Buy Later" section. | The items in the "Buy Later" section are still present and correctly displayed. |
| 15 | **Testing API Response for "Buy Later" Section** | User attempts to move items to the "Buy Later" section with an unstable network connection. | 1. Launch the application with a simulated unstable network connection. <br> 2. Attempt to move items to the "Buy Later" section. <br> 3. Verify that the API handles the request gracefully and provides appropriate feedback. | The API handles the unstable network connection and provides an appropriate error message or retry mechanism. |
| 16 | **Testing "Buy Later" Section Across Different Browsers and Devices** | User accesses the "Buy Later" section on different browsers and devices. | 1. Launch the application on different browsers (e.g., Chrome, Firefox, Safari). <br> 2. Launch the application on different devices (e.g., desktop, mobile). <br> 3. Navigate to the "Buy Later" section and verify that it displays correctly. | The "Buy Later" section is displayed consistently and functions correctly across all tested browsers and devices. |
| 17 | **Testing Edge Cases for "Buy Later" Section** | User attempts to move items to the "Buy Later" section with edge cases (e.g., empty cart, invalid items). | 1. Navigate to the cart page with no items. <br> 2. Attempt to move items to the "Buy Later" section. <br> 3. Verify that an appropriate error message is displayed. | An error message is displayed indicating that there are no items to move to the "Buy Later" section. |
| 18 | **Testing Data Consistency in "Buy Later" Section** | User moves items to the "Buy Later" section and logs out. | 1. Log in to the application and move items to the "Buy Later" section. <br> 2. Log out of the application. <br> 3. Log back in and navigate to the "Buy Later" section. | The items in the "Buy Later" section are consistent and correctly displayed after logging back in. |
| 19 | **Testing "Buy Later" Section with Multiple Users** | Multiple users move items to their respective "Buy Later" sections. | 1. Log in as User A and move items to the "Buy Later" section. <br> 2. Log in as User B and move items to the "Buy Later" section. <br> 3. Verify that each user's "Buy Later" section contains only their own items. | Each user's "Buy Later" section contains only their own items, and there is no cross-contamination between users. |
| 20 | **Testing "Buy Later" Section with Expired Sessions** | User moves items to the "Buy Later" section and the session expires. | 1. Log in to the application and move items to the "Buy Later" section. <br> 2. Wait for the session to expire. <br> 3. Log back in and navigate to the "Buy Later" section. | The items in the "Buy Later" section are still present and correctly displayed after the session expires. |

### **Notes:**
- Ensure that all test cases are executed in different environments (e.g., QA, Staging, Production) to verify consistency.
- Perform regression testing after any code changes to ensure that the "Buy Later" functionality remains stable.
- Conduct performance testing under various loads to ensure that the application can handle a large number of users and items.
- Test the "Buy Later" functionality in conjunction with other features (e.g., checkout, payment processing) to ensure seamless integration.